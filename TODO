
== When creating a new plugin ==
str_replace( 'bl-plugin-template', NEW_PLUGIN_NAME, IN bl-plugin-template.php )
str_replace( 'bl-plugin-template-textdomain', sanitize_title(NEW_PLUGIN_NAME), IN bl-plugin-template.php )


str_replace( 'SHIPS_LOG_TEXTDOMAIN', NEW_PLUGIN_PREFIX, IN all plugin files );
str_replace( 'SHIPS_LOG_PLUGIN_DIR', NEW_PLUGIN_PREFIX, IN all plugin files );
str_replace( 'SHIPS_LOG_PLUGIN_URL', NEW_PLUGIN_PREFIX, IN all plugin files );
str_replace( 'SHIPS_LOG_PLUGIN_FILE', NEW_PLUGIN_PREFIX, IN all plugin files );

str_replace( 'bl_debug', NEW_PLUGIN_PREFIX_debug, IN lib/bl/bl-functions.php )
str_replace( 'bl_dump', NEW_PLUGIN_PREFIX_dump, IN lib/bl/bl-functions.php )
str_replace( 'bl-wp-admin-css', NEW_PLUGIN_PREFIX_wp-admin-css, IN lib/bl/bl-functions.php )
str_replace( 'bl-wp-admin-js', NEW_PLUGIN_PREFIX_wp-admin-js, IN lib/bl/bl-functions.php )

str_replace( 'bl_load_debug_bar', NEW_PLUGIN_PREFIX_load_debug_bar, IN lib/BLDebugBar.class.php );
str_replace( 'bl-plugin-template-debug-bar', NEW_PLUGIN_PREFIX Debug, IN lib/BLDebugBar.class.php );
str_replace( 'BLDebugBar', NEW_PLUGIN_PREFIXDebugBar, IN lib/BLDebugBar.class.php );





rename bl-plugin-template.php to NEW_PLUGIN_NAME.php




== List of hooks ==
*lib/bl-functions.php*
- NEW_PLUGIN_PREFIX_debug - called when needing to debug. See source for options


== Functionality Stuffs ==
Create functionality folder?
- Folder contains useful code snippets that can be uncommented from a functionality control file
-- Possibly use actions/filters to call the functionality functions

- Class autoloader?
-- Looks in the lib folder for classes if the new keyword is used and class does not exist
-- See autoloader on SirGecko

- Template finder
-- Create class that will find templates
-- Child Theme > Parent Theme > Plugin
-- Pass in theme views folder to constructor
-- Views folder will always be 'views' in plugin dir


== The plugin that creates this new plugin should do... ==
Contain a list of recommended plugins to install alongside this new plugin
-- See developer plugin for ways to create links to directly install/activate plugins

Pull new plugin files from Github instead of including them in plugin directly
- Maybe as a zip of HEAD

Let user input a URL to a zip file containing the blank plugin they are looking for
-- This blank plugin should then include a bootstrap file for getting the plugin setup
---- str_replaces, etc

Checkboxes to add additional items
-- 3rd-party and such
-- Maybe an additional tab that the user can manually input the zip source for the checkbox in
---- Or a hidden field that is revealed

Future version allows users to include more stuff later, like a package manager

== Documentation ==
- List of hooks and how to use them
- Plugin folder structure and usage
- Plugin architecture diagrams and descriptions